# -*- coding: utf-8 -*-
"""Ohio_Agency_Data_Agregator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dKC7OuSPVRLAA2A2ZLfOpXbQLgg5NM0I
"""

import requests
import json
import csv
import pandas as pd
from multiprocessing import Process
from multiprocessing import Pool
from concurrent.futures import ProcessPoolExecutor
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading

# Definitions and initializations:
agencyUrl = "https://gateway.insurance.ohio.gov/UI/ODI.Agent.Public.UI/API/BusinessEntitySearch/?PageNumber={}&PageSize=100&SortDirection=asc&LicenseNbr=&NationalProducerNbr=&City=&LicenseTypeKey=propertyCasualty&ResidenceTypeKey=resident&ActiveLicensesOnly=true&FedHealthExchRegisteredOnly=false&BusinessEntityName=&_=1674490611613"
licenseUrl ="https://gateway.insurance.ohio.gov/UI/ODI.Agent.Public.UI/AgentLocator.mvc/DisplayBusinessEntityDetail/{}"
activeAppointmentsUrl = "https://gateway.insurance.ohio.gov/UI/ODI.Agent.Public.UI/AgentLocator.mvc/DisplayAllAppointments?licensingEntityId={}"
# Alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
numThreads = 10


#function to get agency profile information
def agencyReturn(agency):
    #initialize agency data
    profileArray = agency['profileUrl'].split('/')
    agencyName = agency['businessName']
    npnNumber = agency['businessNpn']
    profileId = profileArray[len(profileArray)-1]
    # print(agencyName, '\n NPN#: ',
    # npnNumber, '\n profileId: ',
    # profileId)

    try:
        licenseInformation = pd.read_html(licenseUrl.format(profileId))
        license = licenseInformation[1]
    except:
        print('No license fount for:', agencyName)
    try:
        activeAppointments = pd.read_html(activeAppointmentsUrl.format(profileId))
    except:
        print('No appointments fount for:', agencyName)
    
    #CREATE DATA FRAMES FOR RETURNED DATA and INDEX FOR EMPTY DATA
    try:
        index = []
        for i in range(0, len(activeAppointments[0])+1):
            index.append(i)
    except:
        e = ''
    try:
        agencyAppointments = {
            'Index': index,
            'Agency Name': agencyName,
            'NPN #' : npnNumber,
            'Appointing Company':activeAppointments[0]['Appointing Company'],
            'Appointment Category':activeAppointments[0]['Appointment Category & Type'],
            'Effective Date':activeAppointments[0]['Effective Date'],
            'Appointment Status':activeAppointments[0]['Status'],
            'License #':license['License #'],
            'Lines of Authority (Resident)':license['License (Lines of Authority)'],  #true if resident, false if non-resident
            'License Status': license['Status']
        }
    except:
        agencyAppointments = {
            'Index': index,
            'Agency Name': agencyName,
            'NPN #' : npnNumber,
            'Appointing Company':None,
            'Appointment Category':None,
            'Effective Date':None,
            'Appointment Status':None,
            'License #':license['License #'],
            'Lines of Authority (Resident)':license['License (Lines of Authority)'],  #true if resident, false if non-resident
            'License Status': license['Status']
        }

    # try:
    #     agencyLicenses =  {
    #         'Agency Name': agencyName,
    #         'NPN #' : npnNumber,
    #         'License #':license['License #'],
    #         'Lines of Authority (Resident)':license['License (Lines of Authority)'],  #true if resident, false if non-resident
    #         'License Status': license['Status']
    #     }
    # except:
    #     agencyLicenses =  {
    #         'Agency Name': agencyName,
    #         'NPN #' : npnNumber,
    #         'License #': None,
    #         'Lines of Authority (Resident)':None,  #true if resident, false if non-resident
    #         'License Status': None
    #     }

    #POPULATE PANDAS
    df_agencyAppointments = pd.DataFrame(agencyAppointments, index=agencyAppointments['Index'])
    # df_agencyLicenses = pd.DataFrame(agencyLicenses, index=[0])

    #MERGE FRAMES
    # finalData = pd.merge(df_agencyLicenses, df_agencyAppointments, on='NPN #')

    #RETURN DATA FROM THREAD
    return df_agencyAppointments;


def main():
    #initialize scoped variables
    page = 1

    #get initial list of agencies, and iterate through them.
    agencyDataList = pd.DataFrame()
    response = requests.get(agencyUrl.format(1), timeout= 30)

    #get a count of the total number of agencies needed
    count =  response.json()['totalResultCount']
    print('Num agencies: ', count)

    #for that count, introduce threading to get each agencies data.  
    # with ThreadPoolExecutor(max_workers=numThreads) as executor:

        #loop over num records in response, when new loop starts, get response for next page. (100 results per response)
    for i in range(1, 30, 100):
        threads = []
        print('Page: ', page)
        response = requests.get(agencyUrl.format(page), timeout= 30)

            #100 results returned per response
        for i2 in range(1, 10):
            print(i2)
                # threads.append(executor.submit(agencyReturn, agency = response.json()['searchResults'][i2]))
            returnedData = agencyReturn(agency = response.json()['searchResults'][i2])
                # for task in as_completed(threads):
                #     try:
                #         returnedData = task.result()
                #         agencyDataList = pd.append(returnedData)
                #     except:
                #         print('exception occured')
            agencyDataList = agencyDataList.append(returnedData)
        page = page+1
    #get remaining agency data due to steps skipping incomplete set of 10.
    # response = requests.get(agencyUrl.format(page), timeout= 30)
    # with ThreadPoolExecutor(max_workers=numThreads) as executor:



    # for i in range(1, count%100+1):
    #         # threads.append(executor.submit(agencyReturn, agency = response.json()['searchResults'][i]))
    #         # for task in as_completed(threads):
    #         #     try:
    #         #         returnedData = task.result()
    #         #         agencyDataList = pd.append(returnedData)
    #         #     except:
    #         #         print('exceptions at:', task)
    #     returnedData = agencyReturn(agency = response.json()['searchResults'][i])
    #     agencyDataList = agencyDataList.append(returnedData)


    return agencyDataList


if __name__ == '__main__':
    agencyDataList = main()
    agencyDataList.info()
    frame = agencyDataList.copy()
    agencyDataList.to_csv (r'C:\Users\brass\Desktop\ohio_agency_appointments.csv', index = None, header=True) 
    frame.to_csv (r'C:\Users\brass\Desktop\ohio_agencies_compressed.csv', index = None, header=True) 
